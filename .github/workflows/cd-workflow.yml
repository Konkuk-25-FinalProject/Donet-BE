name: Blue-Green deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # JDK 셋업
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 빌드에 필요한 데이터를 캐싱하여 빌드 속도를 향상시키는 설정
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      # gradle 파일에 접근할 권한을 부여
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      # build 작업 수행
      - name: Build without test
        run: ./gradlew build -x test

      # docker image를 build 하고 docker hub에 push
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build and Push
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # JDK 셋업
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # IP 얻기
      - name: Get Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      # AWS 접속 준비
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # EC2 인바운드 규칙 수정
      - name: Add GitHub Actions IP
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # deploy.sh 파일 전송
      - name: Update deploy.sh on EC2

        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: "./deploy.sh"
          target: "/home/ubuntu"

      # 도커 컴포즈 파일 전송
      - name: Update docker-compose.yml on EC2

        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: "./docker-compose.yml"
          target: "/home/ubuntu"

      # .env 파일에 환경 변수 값들 집어넣기
      - name: Run a New Version of the the application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/${{ secrets.EC2_USERNAME }}
            echo "${{ secrets.ENV_FILE }}" > .env
            chmod +x ./deploy.sh
            ./deploy.sh

      # 인바운드 규칙 삭제
      - name: Remove GitHub Actions IP
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --region ap-southeast-2 \
            --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32